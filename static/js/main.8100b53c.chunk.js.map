{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","components/Jumbotron/index.js","components/Card/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Navbar","href","message","gameScore","topScore","Jumbotron","Card","onClick","clicked","id","alt","src","image","key","Footer","App","state","images","renderCards","array","map","shuffle","i","length","j","Math","floor","random","clickedMatch","filter","isClicked","setState","score","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8100b53c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-color\">\n        <div className=\"navbar-collapse collapse w-100 order-1 order-md-0 dual-collapse2\">\n            <ul className=\"navbar-nav mr-auto ml-5\">\n                <li className=\"nav-item active text-white\">\n                    <a className=\"nav-link\" href=\"/\">Clicky Game</a>\n                </li>\n            </ul>\n        </div>\n        <div className=\"mx-auto order-0 navbar-brand text-white\">\n            <span className=\"nav-comm\">{props.message || \"Click an Image\"}</span>\n        </div>\n        <div className=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\n            <ul className=\"navbar-nav ml-auto mr-5\">\n                <li className=\"nav-item text-white\">\n                    <span className=\"game-score\"><strong>Score:</strong> {props.gameScore || 0} </span>\n                    <span className=\"top-score\"><strong> Top Score:</strong> {props.topScore || 0}</span>\n                </li>\n                \n            </ul>\n        </div>\n    </nav>\n  );\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron\">\n      <p>Click on an Image.</p>\n      <p>The images will shuffle.</p>\n      <p>Click a different image.</p>\n      <h1>But...Only Click an Image Once</h1>\n      <p>Try to get all 12!</p>\n      <p>Scroll down to see all the images!</p>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n\n    <div className=\"click-image\">\n      <div className=\"card\" onClick={() => props.clicked(props.id)} >\n\t\t\t  <img alt={props.id} src={props.image} key={props.id} />\n\t\t  </div>\n    </div>\n  \n  )\n}\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer(props) {\n  return (\n    // Sticky Footer from Portfolio \n    <footer className=\"footer mt-auto py-3\">\n\n        <div className=\"container-sm\">\n\n          Copyright &copy; 2020 Tim Shaffer\n\n        </div>\n\n    </footer>\n  )\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport images from \"./images.json\";\n\nclass App extends Component {\n\n  // set default state values for scoring and messages\n  state = {\n    images: images,\n    topScore: 0,\n    gameScore: 0,\n    message: \"Click an Image\"\n  };\n\n  // method to render the Cards onto the page\n  renderCards = (array) => {\n    return this.state.images.map(image => (\n      <section className='col s4 m3 l3' key={image.id} id={image.id}>\n        <Card\n          clicked={this.clicked}\n          id={image.id}\n          key={image.id}\n          image={image.image}\n        />\n      </section>\n      )\n    )\n  }\n\n  // Fisher-Yates Shuffle  from (https://javascript.info/task/shuffle)\n  shuffle = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n  \n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  // method to handle the click actions of a particular card \n  clicked = id => {\n\n    // create a local array to hold the current state of the images array\n    const images = this.state.images;\n\n    // create an array to be equal to the filter for the clicked match\n    const clickedMatch = images.filter(image => image.id === id);\n\n    // If the matched entry has an isClicked value already of true  \n    if (clickedMatch[0].isClicked){\n\n        // reset all the isClicked values in the images array to false\n        for (let i = 0 ; i < images.length ; i++){\n            images[i].isClicked = false;\n        }\n\n        // Shuffle the array to be rendered in a random order (https://javascript.info/task/shuffle)\n        // images.sort(function(a, b){return 0.5 - Math.random()});\n        this.shuffle(this.state.images);\n\n        // set the state variables to continue\n        this.setState({message: \"You already clicked that one!\"});\n        this.setState({gameScore: 0});\n        this.setState({images});\n\n    // Otherwise, the matched entry has an isClicked value of false (Good Guess)\n    // check the current game score to make sure there are still images to pick\n    // check to be sure the gameScore is less than 11 since if it was already 11, this would be the last possible guess\n    } else if (this.state.gameScore < 11) {\n\n        // set the isClicked value to true\n        clickedMatch[0].isClicked = true;\n\n        // create a variable to check the score against the top score \n        let score = this.state.gameScore + 1\n\n        // update the current game score to the new score\n        this.setState({gameScore: score});\n\n        // is the new score better than the top Score\n        if (score > this.state.topScore){\n            this.setState({topScore: score });\n        }\n\n        // Shuffle the array to be rendered in a random order (https://javascript.info/task/shuffle)\n        // images.sort(function(a, b){return 0.5 - Math.random()});\n        this.shuffle(this.state.images);\n\n        // set the state variables to continue\n        this.setState({images});\n        this.setState({message: \"Keep Going!\"});\n\n      // reaching this else means that the guess was the last possible image to click and the user got them all!\n      } else {\n        \n        // reset all the isClicked values in the images array to false to get ready for the next round\n        for (let i = 0 ; i < images.length ; i++){\n          images[i].clicked = false;\n        }\n\n        // Shuffle the array to be rendered in a random order (https://javascript.info/task/shuffle)\n        // images.sort(function(a, b){return 0.5 - Math.random()});\n        this.shuffle(this.state.images);\n\n        // set the state variables to continue for a new game!\n        this.setState({images});\n        this.setState({gameScore: 0});\n        this.setState({message: \"WINNER!!!\"});\n        this.setState({topScore: 12});\n\n    }\n};\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar gameScore={this.state.gameScore} topScore={this.state.topScore} message={this.state.message}/>\n        <Jumbotron />\n        <div className=\"container row\" >\n          {this.renderCards(this.state.images)}\n        </div>\n        <Footer />\n      </Wrapper>\n    );\n    \n  }\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}